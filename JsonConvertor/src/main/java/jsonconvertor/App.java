/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jsonconvertor;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

public class App {

	// original ----------------------------------

	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class Speeches {
		public List<Speech> speeches;
	}
	
	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class Speech {
		public String words;
		public String scene;
		public String actor;		
	}

	// brand new ----------------------------------

	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class Root {
		public String tags;
		public List<LycoRecoCharacter> characters = new ArrayList<>();
		public List<Scenes> scenes = new ArrayList<>();
	}
	
	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class LycoRecoCharacter {
		public String actor;
		public String birthday;
	}

	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class Scenes {
		public String scene;
		public List<Actor> actors;
	}

	@NoArgsConstructor
	@AllArgsConstructor
	@Data
	@Builder
	private static class Actor {
		public String actor;
		public List<String> words;
	}
	
	public static void main(String[] args) throws IOException {
        convertLycorisRecoil(readLycorisRecoil());
    }

	private static Speeches readLycorisRecoil() throws IOException {
        Path source = Paths.get("speech.json");

        ObjectMapper mapper = new ObjectMapper();
        mapper.readTree(source.toFile());
        Speeches speeches = mapper.readValue(source.toFile(), Speeches.class);

        return speeches;
	}

	private static void convertLycorisRecoil(Speeches speeches) throws IOException {
		Root root = Root.builder()
				.tags("")
				.characters(new ArrayList<>())
				.scenes(new ArrayList<>())
				.build();
		
		for (Speech speech: speeches.speeches) {
			// LycoRecoCharacter
			if (!root.characters.stream().filter(v -> Objects.equals(v.actor, speech.actor)).findFirst().isPresent()) {
				root.characters.add(
						LycoRecoCharacter.builder()
							.actor(speech.actor)
							.birthday("")
							.build()
						);
			}
			
			// Scenes
			Optional<Scenes> optionalScenes = root.scenes.stream().filter(v -> Objects.equals(v.scene, speech.scene)).findFirst();
			Scenes scenes;
			if (optionalScenes.isPresent()) {
				scenes = optionalScenes.get();
			} else {
				scenes = Scenes.builder()
						.scene(speech.scene)
						.actors(new ArrayList<>())
						.build();
				root.scenes.add(scenes);
			}
			
			// Actor
			Optional<Actor> optionalActor = scenes.actors.stream().filter(v -> Objects.equals(v.actor, speech.actor)).findFirst();
			List<String> words;
			if (optionalActor.isPresent()) {
				words = optionalActor.get().words;
			} else {
				Actor actor = Actor.builder()
						.actor(speech.actor)
						.words(new ArrayList<>())
						.build();
				scenes.actors.add(actor);
				words = actor.words;
			}

			words.add(speech.words);
		}
		
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        
        DefaultPrettyPrinter printer = new DefaultPrettyPrinter();
        printer.indentArraysWith(DefaultIndenter.SYSTEM_LINEFEED_INSTANCE);
        
        String json = mapper.writer(printer).writeValueAsString(root);

        Path desc = Paths.get("result.json");
        Files.writeString(desc, json);
    }

}
